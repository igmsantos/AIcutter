#include "include/DocumentoIA.h"

caracteristicas_t caracteristicas_linhas[] = {
{0,0,3, {NULL,NULL,NULL,NULL,NULL},1.0,CARACTERISTICAS_VISUAIS,				{20,1,1}},
{0,0,4, {NULL,NULL,NULL,NULL,NULL},1.0,CARACTERISTICAS_ESPACIAIS,			{1,1,1,1}},
{0,0,40, {NULL,NULL,NULL,NULL,NULL},1.0,CARACTERISTICAS_ESTATISTICAS,		//{1,1,1,1}},
																			{10,10,26,26,1,
																			 1,1,1,1,1,
																			 1,1,1,1,1,
																			 1,1,1,1,1,
																			 1,1,1,1,1,
																			 1,1,1,1,1,
																			 1,1,1,1,1,
																			 1,1,1,1,1}},
{0,0,10,{NULL,NULL,NULL,NULL,NULL},1.0,CARACTERISTICAS_CLASSIFICATORIAS,	{100,100,100,100,100,100,100,100,100,100}}
};

CDocumentoIA::CDocumentoIA(char *_arquivo): CArquivoXML(_arquivo){
	//memset(num_entradas,0,sizeof(*num_entradas)*CARACTERISTICAS_GRUPOS);

	caracteristicas = caracteristicas_linhas;

	sprintf(ident_file,"%s\0",  arquivo );
	sprintf(verif_file,"%s\0",  arquivo );
	sprintf(&ident_file[strlen(arquivo)-4], ".ident\0");
	sprintf(&verif_file[strlen(arquivo)-4], ".verif\0");
}

caracteristicas_t *CDocumentoIA::getCaracteristicasVisuais(){

	if(!getLinhas())
		return NULL;

		int count;
		fann_type *i,**entradas;

		caracteristicas_t *caracteristicas_visuais = &caracteristicas[CARACTERISTICAS_VISUAIS];

		info_t *info_linha;

		int num_linhas_pagina,
			num_paginas_documento,
			num_entradas_visuais;

		CPaginaXML *pagina = (CPaginaXML*)paginas;
		CLinhaXML *linha = NULL;
		CPalavra  *palavra;

		num_entradas_visuais = caracteristicas_visuais->num_entradas;

		entradas = (fann_type**)malloc(num_linhas * sizeof(fann_type*));
		i = (fann_type*)malloc(num_linhas * num_entradas_visuais * sizeof(fann_type));

		count=0;
		//Enquanto houver paginas

		num_paginas_documento = num_paginas;
		while(num_paginas_documento--){

			linha = pagina->getLinhas();
			num_linhas_pagina = pagina->num_linhas;

			while(num_linhas_pagina--){
				//i = (fann_type*)(input + (count*num_entradas_visuais));

				entradas[count] = i;

				info_linha = linha->getInfo();
//
				i[0] = (fann_type)info_linha->font;
				i[1] = (fann_type)info_linha->negrito?1:0.01;
				i[2] = (fann_type)info_linha->italico?1:0.01;

				count++;
				i+= num_entradas_visuais;
				linha =(CLinhaXML*)linha->getNext();
			}
			pagina = (CPaginaXML*)pagina->getNext();
		}

	caracteristicas_visuais->entradas[CARACTERISTICAS_ORIGINAIS] = entradas;
	caracteristicas_visuais->num_dados = count;

	return caracteristicas_visuais;
}

caracteristicas_t *CDocumentoIA::getCaracteristicasEspaciais(){
	if(!getLinhas())
		return NULL;

	int count;
	int last_top;
	fann_type *i,**entradas;

	caracteristicas_t *caracteristicas_espaciais = &caracteristicas[CARACTERISTICAS_ESPACIAIS];

	info_t *info_linha, *info_pagina;

	int num_linhas_pagina,
		num_paginas_documento,
		num_entradas_espaciais;

	CPaginaXML 	*pagina = (CPaginaXML*)paginas;
	CLinhaXML 	*linha 	= NULL;
	CPalavra  	*palavra;

	num_entradas_espaciais = caracteristicas_espaciais->num_entradas;

	entradas = (fann_type**)malloc(num_linhas*sizeof(fann_type*));
	i = (fann_type*)malloc(num_linhas*num_entradas_espaciais*sizeof(fann_type));

	count=0;
	info_pagina = pagina->getInfo();

	//Enquanto houver paginas
	num_paginas_documento = num_paginas;
	while(num_paginas_documento--){

		linha = pagina->getLinhas();
		num_linhas_pagina = pagina->num_linhas;

		while(num_linhas_pagina--){

			//i = (fann_type*)(input + (count*num_entradas_espaciais));
			entradas[count] = i;

			info_linha = linha->getInfo();

		//	if(count && last_top && info_linha->top > last_top)
			//	i[0] = fabs((fann_type)info_linha->top - ((CLinhaXML*)linha->getPrev())->getInfo()->bottom);
		//	else
		//		i[0] = 0;

			last_top = info_linha->top;

			i[0] = (fann_type)info_linha->width;
			i[1] = (fann_type)info_linha->height;
			i[2] = (fann_type)info_linha->top;
			i[3] = (fann_type)info_linha->left;
			//i[5] = (fann_type)info_linha->area;

			count++;
			i += num_entradas_espaciais;
			linha =(CLinhaXML*)linha->getNext();
			//print_entradas(i,6);
		}
		pagina = (CPaginaXML*)pagina->getNext();
	}

	//caracteristicas_espaciais->multiplicadores[0] = info_pagina->height; //Margem
	caracteristicas_espaciais->multiplicadores[0] = info_pagina->width;  //Largura da linha
	caracteristicas_espaciais->multiplicadores[1] = info_pagina->height; //Altura da linha
	caracteristicas_espaciais->multiplicadores[2] = info_pagina->height; //Posicao top da linha
	caracteristicas_espaciais->multiplicadores[3] = info_pagina->width;  //Posicao left da linha
//	caracteristicas_espaciais->multiplicadores[5] = info_pagina->area; // Area da linha

	caracteristicas_espaciais->num_dados = count;
	caracteristicas_espaciais->entradas[CARACTERISTICAS_ORIGINAIS] = entradas;

	return caracteristicas_espaciais;
}

caracteristicas_t *CDocumentoIA::getCaracteristicasEstatisticas(){

	if(!getLinhas())
		return NULL;

	int count;
	char *t;
	fann_type *i, **entradas;

	caracteristicas_t *caracteristicas_estatisticas = &caracteristicas[CARACTERISTICAS_ESTATISTICAS];

	int num_linhas_pagina,
		num_paginas_documento,
		num_entradas_estatisticas;

	info_t *info_linha;

	CPaginaXML *pagina = (CPaginaXML*)paginas;
	CLinhaXML  *linha = NULL;
	CPalavra   *palavra, *ultima_palavra;
	char 	   *texto;
	fann_type	frequencia[0xff];
	int			tamanho_linha;
	int 		tamanho_entradas;
	int 	    inicio_letras;
	int 	    inicio_numeros;
	num_entradas_estatisticas = caracteristicas_estatisticas->num_entradas;

	entradas = (fann_type**)malloc(num_linhas*sizeof(fann_type*));
	i  = (fann_type*)malloc(num_linhas*num_entradas_estatisticas*sizeof(fann_type));

	count=0;

	inicio_numeros = '0';
	inicio_letras = 'A' - 10;
	//Enquanto houver paginas
	num_paginas_documento = num_paginas;
	while(num_paginas_documento--){

		linha = pagina->getLinhas();
		num_linhas_pagina = pagina->num_linhas;

		while(num_linhas_pagina--){
			//i = (fann_type*)(input + (count*num_entradas_estatisticas));

			entradas[count] = i;

			palavra = linha->getPalavras();

			i[2] = i[3] = i[0] = i[1] = 0;
			if(palavra){
				/*
				t = palavra->getNormalizado();
				if(t && *t > 32){
					if(*t <= '9' && *t >= '0')
						i[0]= (fann_type)(*t - '0');
					else
						i[2]= (fann_type)(*t - 'A');
						//printf("%f--", i[5]);
					ultima_palavra = linha->ultima_palavra;
					t = ultima_palavra->getNormalizado();
					t += ultima_palavra->getTamanho() - 1;
					if(*t > 32){
						if(*t <= '9' && *t >= '0')
							i[1]= (fann_type)(*t - '0');
						else
							i[3]= (fann_type)(*t - 'A');
//							//printf("%c %d--", *t, (unsigned char)*t);
					}
				}

				tamanho_linha = palavra->tamanho;
				texto = linha->getNormalizado();
				memset(frequencia,0,36*sizeof(fann_type));
				while(tamanho_linha--){
					t = &texto[tamanho_linha];
					if(*t <= 'Z' && *t >= 'A')
						frequencia[*t - inicio_letras]++;
					else if(*t <= '9' && *t >= '0')
						frequencia[*t - inicio_numeros]++;

				}
				tamanho_linha = linha->tamanho;
				tamanho_entradas = 36;
				while(tamanho_entradas--){
					frequencia[tamanho_entradas] = (float)frequencia[tamanho_entradas] / tamanho_linha;
				}

				memcpy(&i[4], frequencia, 36*sizeof(fann_type));
		*/

			}
					//printf("%d", linha->getTamanho());
					//fwrite(texto,1,linha->getTamanho(),stdout);
					//printf("\n");
				//print_entradas(i,num_entradas_estatisticas);
			count++;
			i += num_entradas_estatisticas;
			linha =(CLinhaXML*)linha->getNext();
			//print_entradas(i,4);
		}
		pagina = (CPaginaXML*)pagina->getNext();
	}

	caracteristicas_estatisticas->entradas[CARACTERISTICAS_ORIGINAIS] = entradas;
	caracteristicas_estatisticas->num_dados = count;

	return caracteristicas_estatisticas;
}

caracteristicas_t *CDocumentoIA::getCaracteristicasClassificatorias(){
	if(caracteristicas[CARACTERISTICAS_CLASSIFICATORIAS].entradas[CARACTERISTICAS_ORIGINAIS])
		return &caracteristicas[CARACTERISTICAS_CLASSIFICATORIAS];

	if(!getLinhas())
				return NULL;

	CPaginaXML *pagina;
	CLinhaXML *linha;

	fann_type max, **entradas, *i;
	int num_entradas_classificatorias,count, u;
	info_t *info_linha;

	int num_linhas_pagina, num_paginas_documento;

	caracteristicas_t *caracteristicas_classificatorias = &caracteristicas[CARACTERISTICAS_CLASSIFICATORIAS];

	num_entradas_classificatorias = caracteristicas_classificatorias->num_entradas;

	entradas = 	(fann_type**)malloc(num_linhas	*	sizeof(fann_type*));
	i = 		(fann_type*) malloc(num_linhas	*	num_entradas_classificatorias	*	sizeof(fann_type));

	count = 0;
	pagina = getPaginas();
	num_paginas_documento = num_paginas;
	while(num_paginas_documento--){
		linha = (CLinhaXML*)pagina->getLinhas();
		num_linhas_pagina = pagina->num_linhas;
		while(num_linhas_pagina--){
			entradas[count] = i;

			info_linha = linha->getInfo();
			u = num_entradas_classificatorias;
//			printf("linha %p, %p, %p, %d, %d, %d\n",linha, linha->next, i, u, linha->posicao, count);
			//while(u--)
				//i[u] = 0.01;
			memset(i,0,sizeof(fann_type)*num_entradas_classificatorias);
			if(info_linha->tipo >= 0)
				i[info_linha->tipo] = 100;
			count++;
			i += num_entradas_classificatorias;
			linha = (CLinhaXML*)linha->next;
		}
	//	printf("pagina %p, %p, %d\n",pagina, pagina->next, pagina->posicao);
		pagina = (CPaginaXML*)pagina->next;
	}

	caracteristicas_classificatorias->entradas[CARACTERISTICAS_ORIGINAIS] = entradas;
	caracteristicas_classificatorias->num_dados = count;

	getCaracteristicasExternasClassificatorias();

	return caracteristicas_classificatorias;

}

caracteristicas_t *CDocumentoIA::getCaracteristicasExternasClassificatorias(){

	if(caracteristicas[CARACTERISTICAS_CLASSIFICATORIAS].entradas[CARACTERISTICAS_EXTERNAS])
			return &caracteristicas[CARACTERISTICAS_EXTERNAS];

	if(!getLinhas())
		return NULL;

	FILE *ident;
	int num_entradas,
		num_paginas_documento,
		num_pagina,
		num_linhas_pagina,
		num_linha,
		tipo,
		tamanho;

	CPaginaXML *pagina;
	CLinhaXML *linha;

	ident = fopen(ident_file,"r");

	fann_type **entradas_originais;

	if(!ident)
		return NULL;

	printf("Lendo caracteristicas classificatorias externas do arquivo: %s\n", ident_file);

	if(fscanf(ident, "%d\n", &num_paginas_documento) == -1)
		return NULL;

	while(num_paginas_documento--){

		if(fscanf(ident, "%d %d\n", &num_pagina, &num_linhas_pagina) == -1)
			break;

		pagina = getPaginas();
		while(num_pagina-- && pagina)
			pagina = (CPaginaXML*)pagina->getNext();

		while(num_linhas_pagina--){

			if(fscanf(ident, "%d %d\n", &num_linha, &tipo) == -1)
				break;

			if(pagina){

				linha = (CLinhaXML*)pagina->getLinhas();
				while(num_linha-- && linha)
					linha = (CLinhaXML*)linha->getNext();
				if(linha){
					linha->info.tipo = tipo;
					//fwrite(linha->getTexto(),1,linha->getTamanho(),stdout);
					//printf("\n");
				}
			}
		}
	}
	fclose(ident);

	caracteristicas_t *caracteristicas_classificatorias = &caracteristicas[CARACTERISTICAS_CLASSIFICATORIAS];

	fann_type max, **entradas, *i;
	int num_entradas_classificatorias,count, u;
	info_t *info_linha;

	num_entradas_classificatorias = caracteristicas_classificatorias->num_entradas;

	entradas = 	(fann_type**)malloc(num_linhas	*	sizeof(fann_type*));
	i = 		(fann_type*) malloc(num_linhas	*	num_entradas_classificatorias	*	sizeof(fann_type));

	count = 0;
	pagina = getPaginas();
	num_paginas_documento = num_paginas;
	while(num_paginas_documento--){
		linha = (CLinhaXML*)pagina->getLinhas();
		num_linhas_pagina = pagina->num_linhas;
		while(num_linhas_pagina--){
			entradas[count] = i;

			info_linha = linha->getInfo();
			u = num_entradas_classificatorias;
//			printf("linha %p, %p, %p, %d, %d, %d\n",linha, linha->next, i, u, linha->posicao, count);
		//	while(u--)
			//	i[u] = 0.01;
			memset(i,0,sizeof(fann_type)*num_entradas_classificatorias);
			if(info_linha->tipo > 0)
				i[info_linha->tipo] = 100;
			count++;
			i += num_entradas_classificatorias;
			linha = (CLinhaXML*)linha->next;
		}
	//	printf("pagina %p, %p, %d\n",pagina, pagina->next, pagina->posicao);
		pagina = (CPaginaXML*)pagina->next;
	}

	caracteristicas_classificatorias->entradas[CARACTERISTICAS_EXTERNAS] = entradas;
	caracteristicas_classificatorias->num_dados = count;

	return caracteristicas_classificatorias;
}

int CDocumentoIA::reproduzCaracteristicasClassificatorias(caracteristicas_t *caracteristicas_classificatorias){
	if(!getLinhas())
			return NULL;

	FILE *verif;
	int tipo,
		tamanho,
		num_entradas,
		num_linhas_pagina,
		num_paginas_documento,
		i, count;

	CPaginaXML *pagina;
	CLinhaXML *linha;

	fann_type max, **dados, *entradas;

	verif = fopen(verif_file,"w");

	if(verif){
		//num_entradas = caracteristicas[CARACTERISTICAS_CLASSIFICATORIAS].num_entradas;
		//entradas = caracteristicas[CARACTERISTICAS_CLASSIFICATORIAS].entradas;
		num_entradas = caracteristicas_classificatorias->num_entradas;
		dados = caracteristicas_classificatorias->entradas[CARACTERISTICAS_DEDUZIDAS];

		count = 0;
		pagina = getPaginas();
		fprintf(verif, "%d\n", num_paginas);
		num_paginas_documento = num_paginas;
		while(num_paginas_documento--){
			linha = (CLinhaXML*)pagina->getLinhas();
			num_linhas_pagina = pagina->num_linhas;
			fprintf(verif, "%d %d\n", pagina->posicao, num_linhas_pagina);
			while(num_linhas_pagina--){
				tipo = 0;
				max = 0;

				i = num_entradas;
				entradas = dados[count];
				//print_entradas(entradas,num_entradas);
				while(i--)
					if(entradas[i] > max){
						max = entradas[i];
						tipo = i;
					}
				if(entradas[tipo] < 50)
					tipo = 0;

				fprintf(verif, "%d %d\n", linha->posicao, tipo);
				linha->info.tipo = tipo;
				linha = (CLinhaXML*)linha->next;
				count++;
			}
			pagina = (CPaginaXML*)pagina->next;
		}

		fclose(verif);
		return 1;

	}
	return 0;
}
